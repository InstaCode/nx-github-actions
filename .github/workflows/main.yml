name: Main Workflow

on:
  push:
    branches:
      - main

jobs:
  setup:
    name: Affected Matrix
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'chore(release)') }}
    runs-on: ubuntu-latest
    outputs:
      hasChanges: ${{ steps.affected.outputs.hasChanges }}
      matrix: ${{ steps.affected.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci --cache .npm

      - name: Calculate affected
        uses: ./dist/packages/nx-affected-matrix
        id: affected
        with:
          targets: 'test,build'

  execute:
    name: ${{ matrix.target }} (${{ matrix.bucket }})
    if: ${{ needs.setup.outputs.hasChanges }}
    needs: [setup]
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.target == 'test' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci --cache .npm

      - name: Run semantic-release locally
        id: release
        if: ${{ matrix.target == 'build' }}
        uses: ridedott/release-me-action@master
        with:
          release-branches: '["main"]'
          node-module: true
          dry-run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update package.json version
        if: ${{ matrix.target == 'build' && steps.release.outputs.released }}
        run: npm version --no-git-tag-version ${{ steps.release.outputs.version }}

      - name: Execute target
        uses: ./dist/packages/nx-distributed-task
        id: run
        with:
          nxCloud: true
          target: ${{ matrix.target }}
          bucket: ${{ matrix.bucket }}
          projects: ${{ matrix.projects }}

  coverage:
    name: Publish coverage
    runs-on: ubuntu-latest
    needs: [setup, execute]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: test

      - uses: codecov/codecov-action@v1
        with:
          directory: ./coverage/packages/*

  release:
    name: Release version
    if: ${{ needs.setup.outputs.hasChanges }}
    runs-on: ubuntu-latest
    needs: [setup, execute]
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Obtain GitHub App Installation Access Token
        id: githubAppAuth
        run: |
          TOKEN="$(npx obtain-github-app-installation-access-token ci ${{ secrets.GH_AUTH_SECRET }})"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Run semantic-release
        id: release
        uses: ridedott/release-me-action@master
        with:
          release-branches: '["main"]'
          node-module: true
          release-assets: |
            './dist/packages/*'
            './CHANGELOG.md'
        env:
          GITHUB_TOKEN: ${{ steps.githubAppAuth.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish:
    name: Publish actions
    if: ${{ needs.release.outputs.released }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ['nx-affected-matrix', 'nx-distributed-task']
    needs: [setup, execute, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set git config
        run: git config --global hub.protocol https

      - name: Obtain GitHub App Installation Access Token
        id: githubAppAuth
        run: |
          TOKEN="$(npx obtain-github-app-installation-access-token ci ${{ secrets.GH_AUTH_SECRET }})"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Publish action ${{ matrix.package }}
        if: ${{ contains(needs.setup.outputs.matrix, matrix.package) }}
        uses: symplify/monorepo-split-github-action@2.0
        env:
          GITHUB_TOKEN: 'x-access-token:${{ steps.githubAppAuth.outputs.token }}'
        with:
          tag: v${{ needs.release.outputs.version }}
          package-directory: './dist/packages/${{ matrix.package }}'
          split-repository-organization: e-square-io
          split-repository-name: ${{ matrix.package }}
          user-name: e-square-ci
          user-email: ci@e-sqiaure.io

      - name: Update major and patch version tags
        if: ${{ contains(needs.setup.outputs.matrix, matrix.package) }}
        env:
          GITHUB_TOKEN: ${{ steps.githubAppAuth.outputs.token }}
        run: |
          git config user.name e-square-ci
          git config user.email ci@e-square.io
          git remote add upstream "https://x-access-token:$GITHUB_TOKEN@github.com/e-square-io/${{ matrix.package }}.git"
          git fetch --unshallow upstream
          git push upstream :v${{ needs.release.outputs.major }} || true
          git push upstream :v${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }} || true
          git push upstream v${{ needs.release.outputs.major }}
          git push upstream v${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}
